// Ejemplo completo del Agente IAtiva - Asesor de Costeo y Proyecciones
const AgenteIAtiva = require('../src/agent');

async function ejemploCompletoIAtiva() {
    console.log('üß† === DEMOSTRACI√ìN DE I√ÅTIVA - ASESOR VIRTUAL ===\n');
    
    // Crear instancia del agente IAtiva
    const agente = new AgenteIAtiva();
    
    // Iniciar el agente
    agente.iniciar();
    
    console.log('\n--- SIMULANDO SESI√ìN COMPLETA ---\n');
    
    // Simular una sesi√≥n completa de an√°lisis
    const interacciones = [
        // 1. Proceso inicial
        { usuario: "cualquier texto", descripcion: "Trigger inicial" },
        
        // 2. Proporcionar nombre
        { usuario: "Mar√≠a Gonz√°lez", descripcion: "Proporcionar nombre de usuario" },
        
        // 3. Datos de costos paso a paso
        { usuario: "5000", descripcion: "Materia prima - $5,000" },
        { usuario: "3000", descripcion: "Mano de obra - $3,000" },
        { usuario: "500", descripcion: "Empaque - $500" },
        { usuario: "800", descripcion: "Servicios - $800" },
        { usuario: "400", descripcion: "Transporte - $400" },
        { usuario: "600", descripcion: "Marketing - $600" },
        { usuario: "1200", descripcion: "Arriendo/sueldos - $1,200" },
        { usuario: "300", descripcion: "Otros costos - $300" },
        { usuario: "25", descripcion: "Margen de ganancia - 25%" },
        
        // 4. Solicitar recomendaciones
        { usuario: "recomendaciones", descripcion: "Solicitar consejos personalizados" },
        
        // 5. Ver plan de acci√≥n
        { usuario: "plan", descripcion: "Ver plan de acci√≥n de 30 d√≠as" },
        
        // 6. Generar reporte
        { usuario: "reporte", descripcion: "Solicitar generar reporte" },
        { usuario: "html", descripcion: "Elegir formato HTML" }
    ];
    
    console.log('üíº Simulando an√°lisis de costeo para un negocio de productos artesanales...\n');
    
    for (let i = 0; i < interacciones.length; i++) {
        const { usuario, descripcion } = interacciones[i];
        
        console.log(`üë§ Usuario (${descripcion}): ${usuario}`);
        
        try {
            const respuesta = await agente.procesarEntrada(usuario);
            
            if (respuesta === null) {
                console.log('üß† IAtiva: Sesi√≥n terminada.\n');
                break;
            }
            
            // Mostrar solo las primeras l√≠neas para no saturar el ejemplo
            const lineasRespuesta = respuesta.split('\n');
            const resumenRespuesta = lineasRespuesta.slice(0, 5).join('\n');
            const masLineas = lineasRespuesta.length > 5 ? `\n... (${lineasRespuesta.length - 5} l√≠neas m√°s)` : '';
            
            console.log(`üß† IAtiva: ${resumenRespuesta}${masLineas}\n`);
            
            // Pausa peque√±a para simular tiempo de lectura
            await new Promise(resolve => setTimeout(resolve, 500));
            
        } catch (error) {
            console.error(`‚ùå Error en interacci√≥n ${i + 1}: ${error.message}`);
            break;
        }
    }
    
    // Mostrar informaci√≥n final del agente
    console.log('\n=== INFORMACI√ìN DEL AGENTE ===');
    const info = agente.obtenerInformacion();
    console.log(`üß† Nombre: ${info.nombre}`);
    console.log(`üìä Versi√≥n: ${info.version}`);
    console.log(`üíº Especialidad: ${info.especialidad.replace('_', ' y ')}`);
    console.log(`üéØ Estado actual: ${info.estadoActual}`);
    console.log(`‚úÖ Activo: ${info.activo}`);
    console.log(`üìà Progreso de sesi√≥n: ${info.sesionActual.porcentajeCompletado}%`);
    console.log(`üë§ Usuario actual: ${info.sesionActual.nombreUsuario || 'No especificado'}`);
    console.log(`üìÑ Tiene resultados: ${info.tieneResultados ? 'S√≠' : 'No'}`);
    console.log(`üìß Contacto: ${info.contacto}`);
    
    console.log('\nüéâ === DEMOSTRACI√ìN COMPLETADA ===');
    console.log('\nüí° CARACTER√çSTICAS PRINCIPALES DEMOSTRADAS:');
    console.log('‚úÖ Recopilaci√≥n de datos paso a paso');
    console.log('‚úÖ C√°lculos financieros autom√°ticos');
    console.log('‚úÖ An√°lisis de punto de equilibrio');
    console.log('‚úÖ Proyecciones de escenarios');
    console.log('‚úÖ Recomendaciones personalizadas');
    console.log('‚úÖ Plan de acci√≥n de 30 d√≠as');
    console.log('‚úÖ Generaci√≥n de reportes');
    console.log('‚úÖ Interfaz conversacional inteligente');
    
    console.log('\nüöÄ Para usar IAtiva de forma interactiva:');
    console.log('   node src/index.js');
    
    console.log('\nüß† IAtiva - Tu aliado en crecimiento financiero');
    console.log('üìß iativagm@gmail.com');
}

// Funci√≥n para demostrar solo los c√°lculos
async function ejemploCalculosRapidos() {
    console.log('üßÆ === DEMO R√ÅPIDA DE C√ÅLCULOS ===\n');
    
    const agente = new AgenteIAtiva();
    agente.iniciar();
    
    // Simular datos de ejemplo sin interacci√≥n
    const datosDePrueba = {
        costos: {
            materia_prima: 5000,
            mano_obra: 3000,
            empaque: 500,
            servicios: 800,
            transporte: 400,
            marketing: 600,
            arriendo_sueldos: 1200,
            otros_costos: 300
        },
        margen_ganancia: 25,
        nombreUsuario: 'Demo User',
        timestamp: new Date().toISOString()
    };
    
    console.log('üìä Datos de entrada:');
    console.log(JSON.stringify(datosDePrueba.costos, null, 2));
    console.log(`Margen de ganancia: ${datosDePrueba.margen_ganancia}%\n`);
    
    // Realizar c√°lculos directamente
    const resultados = agente.calculadora.calcularCompleto(datosDePrueba);
    
    if (resultados.exito) {
        console.log('‚úÖ RESULTADOS DEL C√ÅLCULO:');
        console.log(`üí∞ Costo total: ${agente.calculadora.formatearMoneda(resultados.resumen.costoTotal)}`);
        console.log(`üíµ Precio sugerido: ${agente.calculadora.formatearMoneda(resultados.resumen.precioVentaSugerido)}`);
        console.log(`üìà Utilidad por unidad: ${agente.calculadora.formatearMoneda(resultados.resumen.utilidadUnitaria)}`);
        console.log(`üìä Margen aplicado: ${agente.calculadora.formatearPorcentaje(resultados.resumen.margenUtilidad)}`);
        
        if (resultados.detalles.puntoEquilibrio.unidades) {
            console.log(`‚öñÔ∏è  Punto de equilibrio: ${resultados.detalles.puntoEquilibrio.unidades} unidades`);
            console.log(`üí∏ Ventas m√≠nimas: ${agente.calculadora.formatearMoneda(resultados.detalles.puntoEquilibrio.ventasEnPesos)}`);
        }
        
        console.log('\nüìã Resumen amigable:');
        const resumen = agente.calculadora.generarResumenAmigable(resultados, datosDePrueba.nombreUsuario);
        console.log(resumen);
        
    } else {
        console.error('‚ùå Error en c√°lculos:', resultados.error);
    }
}

// Ejecutar ejemplos
async function main() {
    const args = process.argv.slice(2);
    
    if (args.includes('--rapido') || args.includes('-r')) {
        await ejemploCalculosRapidos();
    } else if (args.includes('--completo') || args.includes('-c')) {
        await ejemploCompletoIAtiva();
    } else {
        console.log('üß† IAtiva - Ejemplos disponibles:\n');
        console.log('node examples/ejemplo-iativa.js --completo  (o -c)  - Demostraci√≥n completa');
        console.log('node examples/ejemplo-iativa.js --rapido    (o -r)  - Solo c√°lculos r√°pidos');
        console.log('\nSin par√°metros: muestra esta ayuda\n');
        
        console.log('üí° Para usar IAtiva de forma interactiva:');
        console.log('   node src/index.js\n');
    }
}

// Ejecutar si se llama directamente
if (require.main === module) {
    main().catch(console.error);
}

module.exports = {
    ejemploCompletoIAtiva,
    ejemploCalculosRapidos
};